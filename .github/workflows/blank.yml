# This workflows will upload a Python Package using Twine when a release is created
# For more information see: https://help.github.com/en/actions/language-and-framework-guides/using-python-with-github-actions#publishing-to-package-registries

name: Do A release

on: 
  release:
    types: # This configuration does not affect the page_build event above
      - created
  workflow_dispatch:
    inputs:
      version:
        description: 'Version Identifier'
        required: true
        default: '0.0.0'      
jobs:
  deploy:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
      with:
        ref: ${{ github.event.release.target_commitish }}
      
    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.x'
    - name: Install dependencies
      run: |        
        python -m pip install --upgrade pip
        # pip install releasy
    - name: Identify Version
      id: ident-version
      run: |
        TAG=${GITHUB_REF##*/}
        if ! [[ "${{ github.event.inputs.version }}" == "" ]]; then
          TAG=${{ github.event.inputs.version }};
          echo "Push Button Test Deploy:$TAG";
          echo "::set-output name=IS_TEST::true"
          echo "::set-output name=IS_RELEASE::"
        else
          echo "Release Deploy:$TAG"
          echo "::set-output name=IS_TEST::" 
          echo "::set-output name=IS_RELEASE::true"
        fi
        echo "::set-output name=VERSION::$TAG"
    - name: Release Step
      if: ${{ steps.ident-version-id.outputs.IS_RELEASE }}
      run: |
        # echo "::error file="TEST",line=0,col=0::test error message"
        echo "RELEASING CURRENT BRANCH: ${{ github.event.release.target_commitish }}"
        echo ${{ github.head_ref }}
        sed -i "s/__version__=\".*\"/__version__=\"$TAG\"/" version.txt
    - name: Test Release Step
      if: ${{ steps.ident-version-id.outputs.IS_TEST }}
      run: |
        # echo "::error file="TEST",line=0,col=0::test error message"
        echo "TESTING CURRENT BRANCH: ${{ github.event.release.target_commitish }}"
        echo ${{ github.head_ref }}
        sed -i "s/__version__=\".*\"/__version__=\"$TAG\"/" version.txt  
    - name: Recommit Version File
      run: |
        echo "Updating VERSION:${{ steps.ident-version-id.outputs.VERSION }}"
       
        
 
